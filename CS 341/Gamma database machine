## http://cs341.pbworks.com/f/Gamma+-+tkde90.pdf

从DIRECT中学习到经验--并行数据库是可行的；但由于DIRECT使用的是共享内存
和集中控制所以没法把架构扩展到数百个处理器。

核心优点：
        . Gamma用的是共享无关（shared-nothing）的架构----可以拓展到很多处理器
              Q：之前（1990前）用的什么架构呢？
              Q：现在（2000后）用的什么架构呢？
        . Hybrid 哈希联接并行算法  基于哈希的并行算法（不需要集中控制）
              Q：这个算法怎么实现的？
              Q: 现在有什么新的算法？
        . 水平分区 将关系的元组分布在多个磁盘驱动器中----同时处理大型关系而没有通信开销
              Q： 怎么存储的数据?
              Q： 怎么调用的数据？

Q： 这个数据库面向的是单个使用者还是多个使用者？
Q： 当使用者要对这个数据库进行调用的时候，系统进行了什么操作？

Over all question：这个系统和现在主流的DBMS有哪些不同


硬件架构采用了 共享无关的架构
每个节点有自己独立的处理器、内存和储存资源，且不与其他节点共享，它们只通过网络通信
具有以下优点：
. 高可拓展性：可以直接通过增加节点的方式在增加总体系统的性能（计算能力和储存容量）
. 故障隔离：节点单独运行
. 没有中央瓶颈： 由于没有共享资源，系统不会有单一的瓶颈点，可以维持在共负载下的性能


软件架构使用的是水平分区的思想--使数据库软件能利用硬件提供的所有IO带宽
分区方法：
方法1：（默认）round robin  按顺序将每个元组分配给下一个磁盘，一直到最后一个磁盘，
        然后再回到第一个磁盘，形成一个循环，直到所有元组都被分配完毕。
        
        优点：负载均衡：通过轮询调度，可以保证所有的磁盘参与存储过程，避免某些磁盘过载而其他磁盘空闲的情况，从而提高整体的I/O性能。  
              简单有效：轮询调度方法简单易实施，在许多情况下能够有效地实现数据的均匀分布。
        缺点：数据热点问题：如果某些元组被访问的频率远高于其他元组，轮询调度可能无法有效解决热点数据问题，因为它不考虑访问模式的不同。
                        （这个很关键，是提升的关键）难点：识别数据热点；数据迁移和重新分布；查询优化；系统复杂性
              查询优化：对于特定的查询模式，如范围查询，纯粹的轮询可能不是最优的数据分布策略，因为相关的数据可能被分散在不同的磁盘上，
                        增加了查询处理的复杂性和开销。
方法2：哈希
方法3：范围分区


访问方法：聚集索引，非聚集索引
主要区别：
        数据存储：聚集索引直接存储数据行，而非聚集索引存储指向数据行的指针。
        索引数量：一个表只能有一个聚集索引（因为只有一种数据的物理排序方式），但可以有多个非聚集索引。
        查询效率：聚集索引对于范围查询更高效，因为它们确保了数据行在物理上的连续性；而非聚集索引更适用于特定值的快速查找，尤其是当索引列不经常用于范围查询时。

不用回答的Q：为什么左深树比右深树更节省内存？


在处理query的时候，用上了“哈希联接并行算法”这是他们核心的卖点之一：
join- operate：sort-merge, Grace [KITS83], Simple[DEWI84], and Hybrid

